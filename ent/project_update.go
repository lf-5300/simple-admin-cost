// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/hf/simple-admin-cost-api/ent/predicate"
	"github.com/hf/simple-admin-cost-api/ent/project"
)

// ProjectUpdate is the builder for updating Project entities.
type ProjectUpdate struct {
	config
	hooks    []Hook
	mutation *ProjectMutation
}

// Where appends a list predicates to the ProjectUpdate builder.
func (pu *ProjectUpdate) Where(ps ...predicate.Project) *ProjectUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetName sets the "name" field.
func (pu *ProjectUpdate) SetName(s string) *ProjectUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableName(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// SetCode sets the "code" field.
func (pu *ProjectUpdate) SetCode(s string) *ProjectUpdate {
	pu.mutation.SetCode(s)
	return pu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableCode(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetCode(*s)
	}
	return pu
}

// SetCreateBy sets the "create_by" field.
func (pu *ProjectUpdate) SetCreateBy(u uint64) *ProjectUpdate {
	pu.mutation.ResetCreateBy()
	pu.mutation.SetCreateBy(u)
	return pu
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableCreateBy(u *uint64) *ProjectUpdate {
	if u != nil {
		pu.SetCreateBy(*u)
	}
	return pu
}

// AddCreateBy adds u to the "create_by" field.
func (pu *ProjectUpdate) AddCreateBy(u int64) *ProjectUpdate {
	pu.mutation.AddCreateBy(u)
	return pu
}

// ClearCreateBy clears the value of the "create_by" field.
func (pu *ProjectUpdate) ClearCreateBy() *ProjectUpdate {
	pu.mutation.ClearCreateBy()
	return pu
}

// SetCreateTime sets the "create_time" field.
func (pu *ProjectUpdate) SetCreateTime(t time.Time) *ProjectUpdate {
	pu.mutation.SetCreateTime(t)
	return pu
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableCreateTime(t *time.Time) *ProjectUpdate {
	if t != nil {
		pu.SetCreateTime(*t)
	}
	return pu
}

// ClearCreateTime clears the value of the "create_time" field.
func (pu *ProjectUpdate) ClearCreateTime() *ProjectUpdate {
	pu.mutation.ClearCreateTime()
	return pu
}

// SetUpdateBy sets the "update_by" field.
func (pu *ProjectUpdate) SetUpdateBy(u uint64) *ProjectUpdate {
	pu.mutation.ResetUpdateBy()
	pu.mutation.SetUpdateBy(u)
	return pu
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableUpdateBy(u *uint64) *ProjectUpdate {
	if u != nil {
		pu.SetUpdateBy(*u)
	}
	return pu
}

// AddUpdateBy adds u to the "update_by" field.
func (pu *ProjectUpdate) AddUpdateBy(u int64) *ProjectUpdate {
	pu.mutation.AddUpdateBy(u)
	return pu
}

// ClearUpdateBy clears the value of the "update_by" field.
func (pu *ProjectUpdate) ClearUpdateBy() *ProjectUpdate {
	pu.mutation.ClearUpdateBy()
	return pu
}

// SetUpdateTime sets the "update_time" field.
func (pu *ProjectUpdate) SetUpdateTime(t time.Time) *ProjectUpdate {
	pu.mutation.SetUpdateTime(t)
	return pu
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableUpdateTime(t *time.Time) *ProjectUpdate {
	if t != nil {
		pu.SetUpdateTime(*t)
	}
	return pu
}

// ClearUpdateTime clears the value of the "update_time" field.
func (pu *ProjectUpdate) ClearUpdateTime() *ProjectUpdate {
	pu.mutation.ClearUpdateTime()
	return pu
}

// SetTenantID sets the "tenant_id" field.
func (pu *ProjectUpdate) SetTenantID(u uint64) *ProjectUpdate {
	pu.mutation.ResetTenantID()
	pu.mutation.SetTenantID(u)
	return pu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableTenantID(u *uint64) *ProjectUpdate {
	if u != nil {
		pu.SetTenantID(*u)
	}
	return pu
}

// AddTenantID adds u to the "tenant_id" field.
func (pu *ProjectUpdate) AddTenantID(u int64) *ProjectUpdate {
	pu.mutation.AddTenantID(u)
	return pu
}

// ClearTenantID clears the value of the "tenant_id" field.
func (pu *ProjectUpdate) ClearTenantID() *ProjectUpdate {
	pu.mutation.ClearTenantID()
	return pu
}

// SetDeleted sets the "deleted" field.
func (pu *ProjectUpdate) SetDeleted(b bool) *ProjectUpdate {
	pu.mutation.SetDeleted(b)
	return pu
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableDeleted(b *bool) *ProjectUpdate {
	if b != nil {
		pu.SetDeleted(*b)
	}
	return pu
}

// Mutation returns the ProjectMutation object of the builder.
func (pu *ProjectUpdate) Mutation() *ProjectMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProjectUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProjectUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProjectUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProjectUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *ProjectUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(project.Table, project.Columns, sqlgraph.NewFieldSpec(project.FieldID, field.TypeUint64))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(project.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.Code(); ok {
		_spec.SetField(project.FieldCode, field.TypeString, value)
	}
	if value, ok := pu.mutation.CreateBy(); ok {
		_spec.SetField(project.FieldCreateBy, field.TypeUint64, value)
	}
	if value, ok := pu.mutation.AddedCreateBy(); ok {
		_spec.AddField(project.FieldCreateBy, field.TypeUint64, value)
	}
	if pu.mutation.CreateByCleared() {
		_spec.ClearField(project.FieldCreateBy, field.TypeUint64)
	}
	if value, ok := pu.mutation.CreateTime(); ok {
		_spec.SetField(project.FieldCreateTime, field.TypeTime, value)
	}
	if pu.mutation.CreateTimeCleared() {
		_spec.ClearField(project.FieldCreateTime, field.TypeTime)
	}
	if value, ok := pu.mutation.UpdateBy(); ok {
		_spec.SetField(project.FieldUpdateBy, field.TypeUint64, value)
	}
	if value, ok := pu.mutation.AddedUpdateBy(); ok {
		_spec.AddField(project.FieldUpdateBy, field.TypeUint64, value)
	}
	if pu.mutation.UpdateByCleared() {
		_spec.ClearField(project.FieldUpdateBy, field.TypeUint64)
	}
	if value, ok := pu.mutation.UpdateTime(); ok {
		_spec.SetField(project.FieldUpdateTime, field.TypeTime, value)
	}
	if pu.mutation.UpdateTimeCleared() {
		_spec.ClearField(project.FieldUpdateTime, field.TypeTime)
	}
	if value, ok := pu.mutation.TenantID(); ok {
		_spec.SetField(project.FieldTenantID, field.TypeUint64, value)
	}
	if value, ok := pu.mutation.AddedTenantID(); ok {
		_spec.AddField(project.FieldTenantID, field.TypeUint64, value)
	}
	if pu.mutation.TenantIDCleared() {
		_spec.ClearField(project.FieldTenantID, field.TypeUint64)
	}
	if value, ok := pu.mutation.Deleted(); ok {
		_spec.SetField(project.FieldDeleted, field.TypeBool, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{project.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProjectUpdateOne is the builder for updating a single Project entity.
type ProjectUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProjectMutation
}

// SetName sets the "name" field.
func (puo *ProjectUpdateOne) SetName(s string) *ProjectUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableName(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// SetCode sets the "code" field.
func (puo *ProjectUpdateOne) SetCode(s string) *ProjectUpdateOne {
	puo.mutation.SetCode(s)
	return puo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableCode(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetCode(*s)
	}
	return puo
}

// SetCreateBy sets the "create_by" field.
func (puo *ProjectUpdateOne) SetCreateBy(u uint64) *ProjectUpdateOne {
	puo.mutation.ResetCreateBy()
	puo.mutation.SetCreateBy(u)
	return puo
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableCreateBy(u *uint64) *ProjectUpdateOne {
	if u != nil {
		puo.SetCreateBy(*u)
	}
	return puo
}

// AddCreateBy adds u to the "create_by" field.
func (puo *ProjectUpdateOne) AddCreateBy(u int64) *ProjectUpdateOne {
	puo.mutation.AddCreateBy(u)
	return puo
}

// ClearCreateBy clears the value of the "create_by" field.
func (puo *ProjectUpdateOne) ClearCreateBy() *ProjectUpdateOne {
	puo.mutation.ClearCreateBy()
	return puo
}

// SetCreateTime sets the "create_time" field.
func (puo *ProjectUpdateOne) SetCreateTime(t time.Time) *ProjectUpdateOne {
	puo.mutation.SetCreateTime(t)
	return puo
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableCreateTime(t *time.Time) *ProjectUpdateOne {
	if t != nil {
		puo.SetCreateTime(*t)
	}
	return puo
}

// ClearCreateTime clears the value of the "create_time" field.
func (puo *ProjectUpdateOne) ClearCreateTime() *ProjectUpdateOne {
	puo.mutation.ClearCreateTime()
	return puo
}

// SetUpdateBy sets the "update_by" field.
func (puo *ProjectUpdateOne) SetUpdateBy(u uint64) *ProjectUpdateOne {
	puo.mutation.ResetUpdateBy()
	puo.mutation.SetUpdateBy(u)
	return puo
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableUpdateBy(u *uint64) *ProjectUpdateOne {
	if u != nil {
		puo.SetUpdateBy(*u)
	}
	return puo
}

// AddUpdateBy adds u to the "update_by" field.
func (puo *ProjectUpdateOne) AddUpdateBy(u int64) *ProjectUpdateOne {
	puo.mutation.AddUpdateBy(u)
	return puo
}

// ClearUpdateBy clears the value of the "update_by" field.
func (puo *ProjectUpdateOne) ClearUpdateBy() *ProjectUpdateOne {
	puo.mutation.ClearUpdateBy()
	return puo
}

// SetUpdateTime sets the "update_time" field.
func (puo *ProjectUpdateOne) SetUpdateTime(t time.Time) *ProjectUpdateOne {
	puo.mutation.SetUpdateTime(t)
	return puo
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableUpdateTime(t *time.Time) *ProjectUpdateOne {
	if t != nil {
		puo.SetUpdateTime(*t)
	}
	return puo
}

// ClearUpdateTime clears the value of the "update_time" field.
func (puo *ProjectUpdateOne) ClearUpdateTime() *ProjectUpdateOne {
	puo.mutation.ClearUpdateTime()
	return puo
}

// SetTenantID sets the "tenant_id" field.
func (puo *ProjectUpdateOne) SetTenantID(u uint64) *ProjectUpdateOne {
	puo.mutation.ResetTenantID()
	puo.mutation.SetTenantID(u)
	return puo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableTenantID(u *uint64) *ProjectUpdateOne {
	if u != nil {
		puo.SetTenantID(*u)
	}
	return puo
}

// AddTenantID adds u to the "tenant_id" field.
func (puo *ProjectUpdateOne) AddTenantID(u int64) *ProjectUpdateOne {
	puo.mutation.AddTenantID(u)
	return puo
}

// ClearTenantID clears the value of the "tenant_id" field.
func (puo *ProjectUpdateOne) ClearTenantID() *ProjectUpdateOne {
	puo.mutation.ClearTenantID()
	return puo
}

// SetDeleted sets the "deleted" field.
func (puo *ProjectUpdateOne) SetDeleted(b bool) *ProjectUpdateOne {
	puo.mutation.SetDeleted(b)
	return puo
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableDeleted(b *bool) *ProjectUpdateOne {
	if b != nil {
		puo.SetDeleted(*b)
	}
	return puo
}

// Mutation returns the ProjectMutation object of the builder.
func (puo *ProjectUpdateOne) Mutation() *ProjectMutation {
	return puo.mutation
}

// Where appends a list predicates to the ProjectUpdate builder.
func (puo *ProjectUpdateOne) Where(ps ...predicate.Project) *ProjectUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProjectUpdateOne) Select(field string, fields ...string) *ProjectUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Project entity.
func (puo *ProjectUpdateOne) Save(ctx context.Context) (*Project, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProjectUpdateOne) SaveX(ctx context.Context) *Project {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProjectUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProjectUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *ProjectUpdateOne) sqlSave(ctx context.Context) (_node *Project, err error) {
	_spec := sqlgraph.NewUpdateSpec(project.Table, project.Columns, sqlgraph.NewFieldSpec(project.FieldID, field.TypeUint64))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Project.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, project.FieldID)
		for _, f := range fields {
			if !project.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != project.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(project.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.Code(); ok {
		_spec.SetField(project.FieldCode, field.TypeString, value)
	}
	if value, ok := puo.mutation.CreateBy(); ok {
		_spec.SetField(project.FieldCreateBy, field.TypeUint64, value)
	}
	if value, ok := puo.mutation.AddedCreateBy(); ok {
		_spec.AddField(project.FieldCreateBy, field.TypeUint64, value)
	}
	if puo.mutation.CreateByCleared() {
		_spec.ClearField(project.FieldCreateBy, field.TypeUint64)
	}
	if value, ok := puo.mutation.CreateTime(); ok {
		_spec.SetField(project.FieldCreateTime, field.TypeTime, value)
	}
	if puo.mutation.CreateTimeCleared() {
		_spec.ClearField(project.FieldCreateTime, field.TypeTime)
	}
	if value, ok := puo.mutation.UpdateBy(); ok {
		_spec.SetField(project.FieldUpdateBy, field.TypeUint64, value)
	}
	if value, ok := puo.mutation.AddedUpdateBy(); ok {
		_spec.AddField(project.FieldUpdateBy, field.TypeUint64, value)
	}
	if puo.mutation.UpdateByCleared() {
		_spec.ClearField(project.FieldUpdateBy, field.TypeUint64)
	}
	if value, ok := puo.mutation.UpdateTime(); ok {
		_spec.SetField(project.FieldUpdateTime, field.TypeTime, value)
	}
	if puo.mutation.UpdateTimeCleared() {
		_spec.ClearField(project.FieldUpdateTime, field.TypeTime)
	}
	if value, ok := puo.mutation.TenantID(); ok {
		_spec.SetField(project.FieldTenantID, field.TypeUint64, value)
	}
	if value, ok := puo.mutation.AddedTenantID(); ok {
		_spec.AddField(project.FieldTenantID, field.TypeUint64, value)
	}
	if puo.mutation.TenantIDCleared() {
		_spec.ClearField(project.FieldTenantID, field.TypeUint64)
	}
	if value, ok := puo.mutation.Deleted(); ok {
		_spec.SetField(project.FieldDeleted, field.TypeBool, value)
	}
	_node = &Project{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{project.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
